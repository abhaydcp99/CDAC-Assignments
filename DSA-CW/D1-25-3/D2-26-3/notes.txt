-----------------------------------------
Day 2: Algorithms and Data Structures
Date : 26-March-2025
-----------------------------------------

Topics: 
	- Recursion

	Recursion	:
------------
1	Terminates when the base case becomes true.	
2	Logic is built by solving smaller subproblems.	
3	Each call uses extra stack memory.	
4	Results in shorter, cleaner code.	

Iteration:
----------
1 Terminates when the loop condition becomes false.
2 Logic is built by repeating operations over data.
3 No additional memory usage for each step.
4 Often leads to longer, more verbose code.



2 ways to implement the program:
----------------------------------
1.Iterative 
2.Recursive

class A{
abc(){
	
	abc();
}

main(){
	
	abc();
}
}

Recursion work:
--------------

Base condition:
-The base condition provides the termination condition for the recursion

class A{
    abc(){
        abc();
    
}
main(){
    abc();
}
}



RECURSIVE CASE :-
        -> The recursive case moves towards the base condition by reducing the problem size at each step.


Fibnacci series :-

// f1 = 0, f2=1

//series: 0, 1, 1, 2, 3, 5,8, 13, 21

------------------------------------------------------------------------------------------------------------------------------------------------
RECURSION TYPES :


                1:- Tail recursion : RECURSIVE CALL AT LAST

                    tail(3);
                    void tail (int n){
                        if(n==0)
                            return n
                        else
                            SOP("tail");
                            tail(n-1);           // RECURSIVE CALL AT LAST
                    }
                        
                
                2:-  Head recursion : RECURSIVE CALL AT FIRST

                    head(3);
                    void tail (int n){
                        if(n==0)
                            return n
                        else
                            tail(n-1);        // RECURSIVE CALL AT FIRST
                            SOP("head")     
                    }